/*************************************************** 
  This is an example for our Adafruit 16-channel PWM & Servo driver
  Servo test - this will drive 16 servos, one after the other

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/products/815

  These displays use I2C to communicate, 2 pins are required to  
  interface. For Arduino UNOs, thats SCL -> Analog 5, SDA -> Analog 4

  Adafruit invests time and resources providing this open source code, 
  please support Adafruit and open-source hardware by purchasing 
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.  
  BSD license, all text above must be included in any redistribution
 ****************************************************/

#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>

// called this way, it uses the default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();
// you can also call it with a different address you want
//Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x41);

// Depending on your servo make, the pulse width min and max may vary, you 
// want these to be as small/large as possible without hitting the hard stop
// for max range. You'll have to tweak them as necessary to match the servos you
// have!
#define SERVOMIN  150 // this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  600 // this is the 'maximum' pulse length count (out of 4096)

// our servo # counter
uint8_t servonum = 0;
const int NUM_SERVOS = 6; //for first arm
int starting[NUM_SERVOS] = {180,85,105,35,90,90};

void setup() {

  Serial.begin(9600);
  Serial.println("16 channel Servo test!");
  pwm.begin();
  
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates

  // Drive each servo one at a time
  for (int pulselen = SERVOMIN; pulselen < SERVOMAX; pulselen++)
  {
    pwm.setPWM(servonum, 0, pulselen);
  }
  delay(500);
  
  for (int servoIndex = 0; servoIndex < NUM_SERVOS; servoIndex++)
  {
    pulselen = map(starting[servoIndex],0,180,SERVOMIN,SERVOMAX);
    pwm.setPWM(servoIndex,0,pulselen);
    delay(15);
  }
  delay(5000);
  // set wrist
  pulselen = map(170,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen);
  delay(2000);
  // close claw
  pulselen = map(98,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(5,0,pulselen);
  delay(1000);
  
  letterI();
  makeSpace();
  letterE();
  makeSpace();
  letterE();
  makeSpace();
  letterE();
  
}

void makeSpace()
{
  // new letter
  delay(3000);
  int pulselen = map(90,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(5,0,pulselen); // release knob
  delay(500);
  pulselen = map(175,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen); // rotate wrist
  delay(500);
  pulselen = map(98,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(5,0,pulselen); // grab knob
  delay(500);
  pulselen = map(14,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen); //scroll over
  delay(500);
  pulselen = map(90,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(5,0,pulselen); // release knob
  delay(500);
  pulselen = map(180,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen); // rotate wrist
  delay(500);
  pulselen = map(98,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(5,0,pulselen); // grab knob
  delay(500);
  
}

void letterI()
{
  // draw I
  int pulselen = map(30,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen);
  delay(500);
  pulselen = map(115,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen);
  delay(2000);
  pulselen = map(170,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen);
  delay(500);
  pulselen = map(30,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen);
}

void letterE()
{
  int pulselen;
  //draw E
  for (int i = 0; i < 3; i++)
  {
  pulselen = map(40,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen);
  delay(500);
  pulselen = map(180,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen);
  delay(2000);
  }
  pulselen = map(40,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(4,0,pulselen);
  
}

void loop() 
{
}
