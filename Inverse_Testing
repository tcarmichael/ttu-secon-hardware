#include <Servo.h>
char foo;
#include <math.h>
#include <Wire.h>
//#define DEBUG

//comment to disable the Force Sensitive Resister on the gripper
//#define FSRG

//FSRG pin Must be analog!!
#define FSRG_pin A1

//Select which arm by uncommenting the corresponding line
//#define AL5A
//#define AL5B
#define AL5B

//uncomment for digital servos in the Shoulder and Elbow
//that use a range of 900ms to 2100ms
//#define DIGITAL_RANGE

#ifdef AL5A
const float A = 3.75;
const float B = 4.25;
#elif defined AL5B
const float A = 4.75;
const float B = 5.00;
#elif defined AL5D
const float A = 5.75;
const float B = 7.375;
#endif



//Arm Servo pins
#define Base_pin 2
#define Shoulder_pin 3
#define Elbow_pin 4
#define Wrist_pin 5
#define Gripper_pin 7
#define WristR_pin 6


//Radians to Degrees constant
const float rtod = 57.295779;

//Arm Speed Variables
float Speed = 1.0;
int sps = 3;

//Servo Objects
Servo Elb;
Servo Shldr;
Servo Wrist;
Servo Base;
Servo WristR;
Servo Gripper;

//Arm Current Pos
float X = 4;
float Y = 4;
int Z = 90;
int G = 90;
int WR = 90;
float WA = 0;

//Arm temp pos
float tmpx = 4;
float tmpy = 4;
int tmpz = 90;
int tmpg = 90;
int tmpwr = 90;
float tmpwa = 0;


boolean mode = true;

void setup()
{
  Serial.begin(115200);

Base.attach(Base_pin);
Shldr.attach(Shoulder_pin);
Elb.attach(Elbow_pin);
Wrist.attach(Wrist_pin);
Gripper.attach(Gripper_pin);
WristR.attach(WristR_pin);

}




int Arm(float x, float y, float z, int g, float wr, int wa) //Here's all the Inverse Kinematics to control the arm
{
  
	x=x-1;
	y=y+x*(.5);
	float M = sqrt((y*y)+(x*x));
  if(M <= 0)
    return 1;
  float A1 = atan(y/x);
  if(x <= 0)
    return 1;
  float A2 = acos((A*A-B*B+M*M)/((A*2)*M));
  float Elbow = acos((A*A+B*B-M*M)/((A*2)*B));
  float Shoulder = A1 + A2;
  Elbow = Elbow * rtod;
  Shoulder = Shoulder * rtod;
  if((int)Elbow <= 0 || (int)Shoulder <= 0)
    return 1;
  float Wris = abs(wa - Elbow - Shoulder) - 90;
#ifdef DIGITAL_RANGE
  Elb.writeMicroseconds(map(180 - Elbow, 0, 180, 900, 2100  ));
  Shldr.writeMicroseconds(map(Shoulder, 0, 180, 900, 2100));
#else
  Elb.write(180 - Elbow);
  Shldr.write(Shoulder);
#endif
  Wrist.write(180 - Wris);
  Base.write(z);
  WristR.write(wr);
  #ifndef FSRG
  Gripper.write(g);
  #endif
  Y = tmpy;
  X = tmpx;
  Z = tmpz;
  WA = tmpwa;
  #ifndef FSRG
  G = tmpg;
  #endif
  WR = tmpwr;
  return 0; 
}


void loop()
{

	//zero_x();
	//zero_y();
	/*Arm(4, 3, 50, 90, 90, -75);
	delay(1500);
	Arm(4, 0, 50, 90, 90, -75);
	delay(1500);*/
	circle();
}

void zero_x()
{
  for( double yaxis = -5; yaxis < 5; yaxis += .1 ) {
    Arm( 5, yaxis, 127.0, 90,90,-75 );
    delay( 10 );
  }
  for( double yaxis = 5; yaxis > -5; yaxis -= .1 ) {
    Arm( 5, yaxis, 127.0, 90,90,-75);
    delay( 10 );
  }
}


void circle()
{
  #define RADIUS 4
  //float angle = 0;
  float zaxis,yaxis;
  for( float angle = 0.0; angle < 360.0; angle += 1.0 ) {
      yaxis = RADIUS * sin( radians( angle ))+3 ;
      zaxis = RADIUS * cos( radians( angle ))+3;
      Arm( zaxis,yaxis , 127, 90,90,-75 );
      delay( 1 );
  }
}

void zero_y()
{
  for( double xaxis = 4; xaxis < 10; xaxis += .1 ) {
	  Arm( xaxis, -5, 127.0, 90,90,-75 );
    delay( 10 );
  }
  for( double xaxis = 10; xaxis > 4; xaxis -= .1 ) {
    Arm(xaxis, -5, 127.0, 90,90,-75);
    delay( 10 );
  }
}
