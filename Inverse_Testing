

char foo;
#include <math.h>
#include <Wire.h>
//#include <Adafruit_PWMServoDriver.h>
#include <Adafruit_MotorShield.h>
#include <Mecanum.h>


Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

#define SERVOMIN  150 // this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  600 // this is the 'maximum' pulse length count (out of 4096)

//#define DEBUG

// our servo # counter
uint8_t servonum = 0;
const int NUM_SERVOS = 6; //for first arm
int starting[NUM_SERVOS]={0, 130, 140, 175, 90, 90};
int starting2[NUM_SERVOS]={180, 130, 140, 175, 90, 90};

const float A = 4.75;
const float B = 5.00;

//Arm Servo pins
#define Rear_Base_pin 0
#define Rear_Shoulder_pin 1
#define Rear_Elbow_pin 2
#define Rear_Wrist_pin 3
#define Rear_WristR_pin 4
#define Rear_Gripper_pin 5

#define Front_Base_pin 0
#define Front_Shoulder_pin 1
#define Front_Elbow_pin 2
#define Front_Wrist_pin 3
#define Front_WristR_pin 4
#define Front_Gripper_pin 5

//Radians to Degrees constant
const float rtod = 57.295779;
int incomingByte=0;



boolean mode = true;





void setup()
{
  Serial.begin(9600);

  

  pwm.begin();
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates
  int pulselen;
  
  /*for (int servoIndex = 5; servoIndex >= 0; servoIndex--)
  {
    pulselen = map(starting[servoIndex],0,180,SERVOMIN,SERVOMAX);
    pwm.setPWM(servoIndex,0,pulselen);
    pulselen = map(starting2[servoIndex],0,180,SERVOMIN,SERVOMAX);
    pwm.setPWM(servoIndex+10,0,pulselen);
     Serial.println("16 channel Servo test!");
    delay(15);
  }*/
  
 /* Mecanum mecanum;


  mecanum.mecRun(0,0,0);*/
   
   Arm(2,2,0, 90,150,90);
   delay(1500);
  /*Serial.print("test");
  Arm(1,4,0,90,0,90);
  delay(1500);
  Arm(1.5,4,0,90,0,90);
  delay(1500);
  Arm(2,4,0,90,0,90);
  delay(1500);
  Arm(2.5,4,0,90,0,90);
  delay(1500);
  Arm(3,4,0,90,0,90);
  delay(1500);
  Arm(3.5,4,0,90,0,90);
  delay(1500);
  Arm(4,4,0,90,0,90);
  delay(1500);
  Arm(4.5,4,0,90,0,90);
  delay(1500);*/





void loop()
{

  // check that there's something in the serial buffer
  if (Serial.available() > 0) {
    // read the byte and store it in our variable 
    // the byte sent is actually an ascii value
    incomingByte = Serial.read();
    // note the upper casing of each letter!
    // each letter turns a motor different way.
  }
}




int Arm_Rear(float x, float y, float z, int g, float wa, int wr) //Here's all the Inverse Kinematics to control the arm
{
  int pulselen;
  float M = sqrt((y*y)+(x*x));
  if(M <= 0)
    return 1;
  float A1 = atan(y/x);
  if(x <= 0)
    return 1;
  float A2 = acos((A*A-B*B+M*M)/((A*2)*M));
  float Elbow = acos((A*A+B*B-M*M)/((A*2)*B));
  float Shoulder = A1 + A2;
  Elbow = Elbow * rtod;
  Shoulder = Shoulder * rtod;
  if((int)Elbow <= 0 || (int)Shoulder <= 0)
    return 1;
  float Wris = abs(wa - Elbow - Shoulder);

  
  pulselen = map(180 - Elbow,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Rear_Elbow_pin,0,pulselen);
  
  pulselen = map(Shoulder,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Rear_Shoulder_pin,0,pulselen);
  
  
  pulselen = map(180 - Wris,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Rear_Wrist_pin,0,pulselen);
  

  pulselen = map(z,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Rear_Base_pin,0,pulselen);
  

  pulselen = map(wr,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Rear_WristR_pin,0,pulselen);
 
  pulselen = map(g,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Rear_Gripper_pin,0,pulselen);
  return 0; 
}


int Arm_Front(float x, float y, float z, int g, float wa, int wr) //Here's all the Inverse Kinematics to control the arm
{
  int pulselen;
  float M = sqrt((y*y)+(x*x));
  if(M <= 0)
    return 1;
  float A1 = atan(y/x);
  if(x <= 0)
    return 1;
  float A2 = acos((A*A-B*B+M*M)/((A*2)*M));
  float Elbow = acos((A*A+B*B-M*M)/((A*2)*B));
  float Shoulder = A1 + A2;
  Elbow = Elbow * rtod;
  Shoulder = Shoulder * rtod;
  if((int)Elbow <= 0 || (int)Shoulder <= 0)
    return 1;
  float Wris = abs(wa - Elbow - Shoulder);

  
  pulselen = map(180 - Elbow,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Front_Elbow_pin,0,pulselen);
  
  pulselen = map(Shoulder,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Front_Shoulder_pin,0,pulselen);
  
  
  pulselen = map(180 - Wris,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Front_Wrist_pin,0,pulselen);
  

  pulselen = map(z,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Front_Base_pin,0,pulselen);
  

  pulselen = map(wr,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Front_WristR_pin,0,pulselen);
 
  pulselen = map(g,0,180,SERVOMIN,SERVOMAX);
  pwm.setPWM(Front_Gripper_pin,0,pulselen);
 
  return 0; 
}




