#include <Wire.h>

#include <QTRSensors.h>
#include <Adafruit_MotorShield.h>

// PID constants
const float Kp = 1.0f; // experiment to determine this, start by something small that just makes your bot follow the line at a slow speed
const float Kd = 0.0f; // experiment to determine this, slowly increase the speeds and adjust this value. ( Note: Kp < Kd)

// Motor speeds
const int RIGHT_MAX_SPEED = 200;
const int LEFT_MAX_SPEED = 200;
const int RIGHT_BASE_SPEED = 150; // Speed when robot is perfectly on the line
const int LEFT_BASE_SPEED = 150;

// Line follower connections
const int NUM_SENSORS = 8;     // number of sensors used
const int EMITTER_PIN = 2;     // emitter is controlled by digital pin 2
unsigned char SENSOR_PINS[] = {14, 15, 16, 17, 18, 19, 20, 21};
const unsigned int TIMEOUT = 2000;

QTRSensorsRC qtrrc(SENSOR_PINS, NUM_SENSORS, TIMEOUT, EMITTER_PIN);

Adafruit_MotorShield motorShield = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor1 = motorShield.getMotor(1);
Adafruit_DCMotor *leftMotor2 = motorShield.getMotor(2);
Adafruit_DCMotor *rightMotor1 = motorShield.getMotor(3);
Adafruit_DCMotor *rightMotor2 = motorShield.getMotor(4);

void setup() {
	Serial.begin(9600);

	motorShield.begin();
	
	leftMotor1->run(FORWARD);
	leftMotor2->run(FORWARD);
	rightMotor1->run(FORWARD);
	rightMotor2->run(FORWARD);
} 

int lastError = 0;

void loop() {
	// Get line follower readings
	unsigned int sensors[NUM_SENSORS];
	int position = qtrrc.readLine(sensors);

	// Calculate the error
	// Positive error is to the left; negative error is to the right
	int error = position - 2500;

	// Convert the error into a motor speed
	int motorSpeed = Kp * error + Kd * (error - lastError);

	lastError = error;

	// Compute the individual motor speeds
	int rightMotorSpeed = RIGHT_BASE_SPEED + motorSpeed;
	int leftMotorSpeed = LEFT_BASE_SPEED - motorSpeed;

	// Prevent the motors from going beyond max speed
	if (rightMotorSpeed > RIGHT_MAX_SPEED)
		rightMotorSpeed = RIGHT_MAX_SPEED;
	if (leftMotorSpeed > LEFT_MAX_SPEED)
		leftMotorSpeed = LEFT_MAX_SPEED;

	// Keep the motor speed positive
	if (rightMotorSpeed < 0)
		rightMotorSpeed = 0;
	if (leftMotorSpeed < 0)
		leftMotorSpeed = 0;
	
	// Send the commands to the motor controller
	{
		rightMotor1->setSpeed(rightMotorSpeed);
		rightMotor2->setSpeed(rightMotorSpeed);

		leftMotor1->setSpeed(leftMotorSpeed);
		leftMotor2->setSpeed(leftMotorSpeed);
	}
}
